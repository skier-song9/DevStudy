C++ 복습파일
***********************************************
Virtual Machine username/password
	-Ubuntu
		- username: song9
		- password: kmu
⚠️파일명, 폴더명 모두 소문자로.
================================================
[03.02]
⚠️이 수업은 indentation은 space 2개만 쓴다.
1. 실습환경구축01-step1
- 리눅스 ubuntu 기반 
	공식적으로는 리눅스 기반, 윈도우 ㄱㅊ. 
	- virtualbox 설치하기
- 강의노트는 우분투에서 콘솔로 출력할 것임. 컴파일은 아무데서나 하면 됨.
- utility = 내가 만든 코드를 빠르게 컴파일하는 것. >> 🔔make , cmake 등이 있음.
	>> cmake = g++, window 등 크로스 컴파일을 가능케 하는 유틸리티
	>> g++ compiler = 손쉽게 컴파일해줌. (gcc는 프론트)
- gdb debugger 사용법도 나중에 배움.
2. step2
3. step3 
4. atom 편집기. vscode 써도 됨.
5. gcc compiler 
6. c++ 테스트 코드 출력해보기. >> atom 파일에 예제 있음.
7. c++란? c보다 '설계', 즉 객체지향을 위주로 만들어진 언어.
	왜 C++인가? 메모리에 아주 민감한 언어이다. 
	- 로더 = HDD/SSD의 파일을 RAM에  올려주는 역할을 수행하는 것.
	- entry point = cpu가 RAM의 파일을 실행시키기 위해서 이벤트 트리거가 필요한데, RAM의 이 부분을 entry point라고 함. 
    >> c++에서는 'main'이라는 function이 entry point가 됨.>> entry point는 프로그램/프로젝트에서 하나만 있는 게 효과적이고 효율적임.
8. gcc compiler
	- gcc는 프론트앤드이다. g++가 컴파일러다. 
	- gnu library = 컴파일을 위해 필요한 기본적인 c++ 라이브러리.
	- 실질적인 컴파일러는 g++ 안에 있는 cc1plus >> gcc는 c++을 컴파일하기 위해서 라이브러리를 다 명시해줘야 하는 단점이 있음.
📢c++컴파일 과정.
    gcc.complier.pdf 4page. 
    hello.cpp(source file) & hello.h(Header file-임의 지정 파일) >> preprocessor
    (전처리기 - 내가 작성한 코드에 필요한 것/필요없는 것들을 수정해줌) >> 
    compiler >> object file(컴파일러에 의해 만들어진 파일을 의미. 객체지향의 object는 아님) 
    >> linker(필수 라이브러리를 가져다가 링크를 걸어줌.외부 라이브러리도 가져와줌.) 
    >> executable file(실행가능한 파일이 완성됨) 
    >> 실행 커맨드를 입력하면 Loader가 RAM에 프로그램을 올리고 실행함.

================================================
[03.07]
- 전처리= 컴파일 이전에 파일들을 가져오는 것. >> #,<>,"" 등으로 표현
- C++의 📢함수 구조 : >> 🔔자바와 동일 
    반환타입 함수명(매개변수){
        구현부
    }
- 제어권 (Context)
    ex) 함수 a, b가 있다.
        만약 a함수에서 b()로 b함수를 호출한다면 a함수 실행 중간에 '제어권'이 b로 이동한다.
        >> b에서는 a함수가 '보이지 않는다.' 즉, a함수의 지역변수 등을 볼 수 없다.
        b에서ㅓ의 실행문이 종료되면 다시 a로 돌아온다.




================================================



================================================


